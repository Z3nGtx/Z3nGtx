#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define N 100

struct process {
    int process_id;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int turn_around_time;
    int remaining_time;
};

int queue[N];
int front = 0, rear = 0;
struct process proc[N];

void push(int process_id) {
    queue[rear] = process_id;
    rear = (rear + 1) % N;
}

int pop() {
    if (front == rear)
        return -1;
    int return_position = queue[front];
    front = (front + 1) % N;
    return return_position;
}

int main() {
    float wait_time_total = 0.0, tat_total = 0.0;
    int n, time_quantum;
    int current_time = 0;
    int processes_completed = 0;
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    for (int i = 0; i < n; i++) {
        printf("Enter the arrival time for process %d: ", i + 1);
        scanf("%d", &proc[i].arrival_time);
        printf("Enter the burst time for process %d: ", i + 1);
        scanf("%d", &proc[i].burst_time);
        proc[i].process_id = i + 1;
        proc[i].remaining_time = proc[i].burst_time;
        proc[i].waiting_time = 0;
        proc[i].turn_around_time = 0;
    }
    
    printf("Enter time quantum: ");
    scanf("%d", &time_quantum);

    // Push processes into queue as they arrive
    for (int i = 0; i < n; i++) {
        if (proc[i].arrival_time == 0) {
            push(i);
        }
    }

    while (processes_completed < n) {
        int current_process = pop();

        if (current_process == -1) { 
            current_time++;
            for (int i = 0; i < n; i++) {
                if (proc[i].arrival_time == current_time) {
                    push(i);
                }
            }
            continue;
        }

        if (proc[current_process].remaining_time > time_quantum) {
            current_time += time_quantum;
            proc[current_process].remaining_time -= time_quantum;

            for (int i = 0; i < n; i++) {
                if (i != current_process && proc[i].arrival_time <= current_time && proc[i].remaining_time > 0) {
                    push(i);
                }
            }

            push(current_process);
        } else {
            current_time += proc[current_process].remaining_time;
            proc[current_process].remaining_time = 0;
            processes_completed++;

            proc[current_process].turn_around_time = current_time - proc[current_process].arrival_time;
            proc[current_process].waiting_time = proc[current_process].turn_around_time - proc[current_process].burst_time;

            wait_time_total += proc[current_process].waiting_time;
            tat_total += proc[current_process].turn_around_time;
        }

        for (int i = 0; i < n; i++) {
            if (i != current_process && proc[i].arrival_time <= current_time && proc[i].remaining_time > 0) {
                push(i);
            }
        }
    }

    printf("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               proc[i].process_id,
               proc[i].arrival_time,
               proc[i].burst_time,
               proc[i].waiting_time,
               proc[i].turn_around_time);
    }

    printf("\nAverage Waiting Time: %.2f", wait_time_total / n);
    printf("\nAverage Turnaround Time: %.2f\n", tat_total / n);

    return 0;
}

✅ What Input to Give
Let’s go through an example input step-by-step.

🖊️ Step 1: Enter the number of processes

Enter the number of processes: 4

🖊️ Step 2: For each process, enter its arrival time and burst time

Enter the arrival time for process 1: 0
Enter the burst time for process 1: 5

Enter the arrival time for process 2: 1
Enter the burst time for process 2: 3

Enter the arrival time for process 3: 2
Enter the burst time for process 3: 1

Enter the arrival time for process 4: 3
Enter the burst time for process 4: 2

🖊️ Step 3: Enter the time quantum
Enter time quantum: 2
