#include "stdio.h"
#include "string.h"
#include "pthread.h"
#include "semaphore.h"
#include "stdlib.h"
#include "unistd.h"

#define BUFFER_SIZE 16
int buffer[BUFFER_SIZE];
sem_t database, mutex;
int counter, readerCount;
pthread_t readerThread[50], writerThread[50];

void init() {
    sem_init(&mutex, 0, 1);
    sem_init(&database, 0, 1);
    counter = 0;
    readerCount = 0;
}

void *writer(void *param) {
    sem_wait(&database);
    int item = rand() % 5;  // Generate random data
    if (counter < BUFFER_SIZE) {
        buffer[counter] = item;
        printf("Data written by writer %d is %d at position %d\n", *(int *)param, buffer[counter], counter);
        counter++;
    } else {
        printf("Writer %d: Buffer is full, cannot write\n", *(int *)param);
    }
    sleep(1);
    sem_post(&database);
    return NULL;
}

void *reader(void *param) {
    sem_wait(&mutex);
    readerCount++;
    if (readerCount == 1) {
        sem_wait(&database); // First reader locks the database
    }
    sem_post(&mutex);

    if (counter > 0) {
        counter--;
        printf("Data read by reader %d is %d from position %d\n", *(int *)param, buffer[counter], counter);
    } else {
        printf("Reader %d: Buffer is empty, cannot read\n", *(int *)param);
    }

    sem_wait(&mutex);
    readerCount--;
    if (readerCount == 0) {
        sem_post(&database); // Last reader unlocks the database
    }
    sem_post(&mutex);
    sleep(1);
    return NULL;
}

int main() {
    init();
    int no_of_writers, no_of_readers;
    printf("Enter number of readers: ");
    scanf("%d", &no_of_readers);
    printf("Enter number of writers: ");
    scanf("%d", &no_of_writers);

    int i;
    for (i = 0; i < no_of_writers; i++) {
        int *param = malloc(sizeof(int));
        *param = i + 1;  // Assign writer id
        pthread_create(&writerThread[i], NULL, writer, param);
    }
    for (i = 0; i < no_of_readers; i++) {
        int *param = malloc(sizeof(int));
        *param = i + 1;  // Assign reader id
        pthread_create(&readerThread[i], NULL, reader, param);
    }

    for (i = 0; i < no_of_writers; i++) {
        pthread_join(writerThread[i], NULL);
    }
    for (i = 0; i < no_of_readers; i++) {
        pthread_join(readerThread[i], NULL);
    }

    return 0;
}

✅ What Input to Provide
When prompted, just input:

🖊️ Step 1: Enter number of readers

Enter number of readers: 3

🖊️ Step 2: Enter number of writers

Enter number of writers: 2
