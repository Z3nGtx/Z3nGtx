#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, i, head, total_movement = 0, direction;

    // Input the number of requests
    printf("Enter the number of requests: ");
    scanf("%d", &n);

    // Input the request sequence
    int requests[n];
    printf("Enter the request sequence: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    // Input the initial head position
    printf("Enter the initial head position: ");
    scanf("%d", &head);

    // Input the disk size (last cylinder number)
    printf("Enter the disk size (last cylinder number): ");
    int disk_size;
    scanf("%d", &disk_size);

    // Input the direction (1 for high, 0 for low)
    printf("Enter the direction (1 for high, 0 for low): ");
    scanf("%d", &direction);

    // Sort the request array
    for (i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (requests[i] > requests[j]) {
                int temp = requests[i];
                requests[i] = requests[j];
                requests[j] = temp;
            }
        }
    }

    // SCAN algorithm
    if (direction == 1) { // Move towards higher end
        // Move head towards the higher end, servicing requests
        for (i = 0; i < n && requests[i] < head; i++);
        for (; i < n; i++) {
            printf("Serviced request: %d\n", requests[i]);
            total_movement += abs(head - requests[i]);
            head = requests[i];
        }

        // Move head to the end of the disk
        if (head < disk_size - 1) {
            total_movement += abs(head - (disk_size - 1));
            head = disk_size - 1;
        }

        // Reverse direction and service the requests
        for (i--; i >= 0; i--) {
            printf("Serviced request: %d\n", requests[i]);
            total_movement += abs(head - requests[i]);
            head = requests[i];
        }
    } else { // Move towards lower end
        // Move head towards the lower end, servicing requests
        for (i = n - 1; i >= 0 && requests[i] > head; i--);
        for (; i >= 0; i--) {
            printf("Serviced request: %d\n", requests[i]);
            total_movement += abs(head - requests[i]);
            head = requests[i];
        }

        // Move head to the beginning of the disk
        if (head > 0) {
            total_movement += head;
            head = 0;
        }

        // Reverse direction and service the requests
        for (i++; i < n; i++) {
            printf("Serviced request: %d\n", requests[i]);
            total_movement += abs(head - requests[i]);
            head = requests[i];
        }
    }

    // Print the total head movement
    printf("Total head movement: %d\n", total_movement);

    return 0;
}
