#include <stdio.h>

// Function to print the current frames
void printFrames(int frames[], int frameSize) {
    for (int i = 0; i < frameSize; i++) {
        if (frames[i] == -1) {
            printf(" - ");  // Empty slot in the frame
        } else {
            printf(" %d ", frames[i]);
        }
    }
    printf("\n");
}

// Function to find the optimal page to replace
int findOptimal(int frames[], int frameSize, int refString[], int refSize, int currentIndex) {
    int farthest = currentIndex;
    int index = -1;

    // Check each page in the frame
    for (int i = 0; i < frameSize; i++) {
        int j;
        // Look ahead to find when each page will be used next
        for (j = currentIndex; j < refSize; j++) {
            if (frames[i] == refString[j]) {
                if (j > farthest) {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        // If the page is not used in the future, return this page's index to replace
        if (j == refSize) return i;
    }
    return index == -1 ? 0 : index;  // If no page is found in the future, replace the first one
}

// Function to simulate the Optimal page replacement algorithm
void optimal(int refString[], int refSize, int frameSize) {
    int frames[frameSize];
    for (int i = 0; i < frameSize; i++) frames[i] = -1;  // Initialize frames to empty (-1)
    int pageFaults = 0;

    printf("\nOptimal Page Replacement:\n");

    // Iterate through the reference string
    for (int i = 0; i < refSize; i++) {
        int found = 0;

        // Check if the current page is already in the frames
        for (int j = 0; j < frameSize; j++) {
            if (frames[j] == refString[i]) {
                found = 1;
                break;
            }
        }

        // If the page is not found, replace one of the pages in the frames
        if (!found) {
            int replaceIndex = (i < frameSize) ? i : findOptimal(frames, frameSize, refString, refSize, i + 1);
            frames[replaceIndex] = refString[i];  // Replace the selected page
            pageFaults++;
        }

        // Print the current state of the frames after each reference
        printFrames(frames, frameSize);
    }

    // Print the total number of page faults
    printf("Total Page Faults: %d\n", pageFaults);
}

// Main function to drive the program
int main() {
    int refSize, frameSize;

    // Input the reference string and frame size
    printf("Enter the number of pages in the reference string: ");
    scanf("%d", &refSize);

    int refString[refSize];
    printf("Enter the reference string:\n");
    for (int i = 0; i < refSize; i++) {
        scanf("%d", &refString[i]);
    }

    printf("Enter the number of frames (minimum 3): ");
    scanf("%d", &frameSize);

    // Ensure the frame size is at least 3
    if (frameSize < 3) {
        printf("Frame size should be at least 3.\n");
        return 1;
    }

    // Call the optimal page replacement function
    optimal(refString, refSize, frameSize);
    
    return 0;
}
